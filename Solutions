import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

public class Solutions {

  public static void main(String [] args) {

    Integer[] ints = new Integer[] {2,10,4,3,8,6,9,9,18,27};
    Integer[] ints2 = new Integer[] {2,10,4,3,8,6,9,9,18,27,1,52,81,10,1,0,2,0,4,0,8,0,16,0,32,0,64,0,128,2,10,4,3,8,6,9,9,18,27,1,52,81,10,100,50,0,0,0,0,0,0};
    Solutions solution = new Solutions();

    List<Integer> list21 =  Arrays.asList(ints);
    List<Integer> list31 =  Arrays.asList(ints2);
    printSequence(solution.findSequences(list21));
    printSequence(solution.findSequences(list31));

  }

  public List<List<Integer>> findSequences(List<Integer> input) {
    List<List<Integer>> output = new LinkedList<>();
    Map<Integer, Object> data = new TreeMap<>();
    Map<Integer, Object> processed = new LinkedHashMap<>();
    List<Integer> sequence = null;
    int x=0, y=0, z=0;
    for (int i : input) {
      data.put(i, null);
    }

    for (int i=0; i< input.size(); i++) {
      y = input.get(i);

      if (y != 0 && y != 1 && !processed.containsKey(y)) {
        sequence = new LinkedList<>();
        sequence.add(y);
        processed.put(y, null);
        x = y*y;
        while (data.containsKey(x)) {
          sequence.add(x);
          z = x;
          x = x * y;
          y = z;
        }
        if(sequence.size() > 2) {
          output.add(sequence);
         // System.out.println(output);
        }
      }
    }

    return output;
  }

  private static void printSequence(List<List<Integer>> input) {
    int sumSeq = 0, sumAll = 0;
    for (List<Integer> seq : input) {
      for (int i : seq) {
        sumSeq += i;
        sumAll += i;
      }
      System.out.println("Sequence -> " + seq + "  Sum of sequence -> " + sumSeq);
      sumSeq = 0;
    }
    System.out.println("Sum of All sequence -> " + sumAll);
  }
}
